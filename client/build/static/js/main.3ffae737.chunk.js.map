{"version":3,"sources":["actions/errorActions.js","actions/types.js","actions/authActions.js","components/auth/RegisterModal.js","components/auth/LoginModal.js","components/auth/Logout.js","components/AppNavbar.js","actions/itemActions.js","components/ShoppingList.js","components/itemModal.js","reducers/itemReducer.js","reducers/errorReducer.js","reducers/authReducer.js","reducers/index.js","store.js","App.js","serviceWorker.js","index.js"],"names":["returnErrors","msg","status","id","type","payload","clearErrors","tokenConfig","getState","token","auth","config","headers","RegisterModal","state","model","name","email","password","toggle","props","setState","onChange","e","target","value","onSubmit","preventDefault","newUser","register","prevProps","this","error","isAuthenticated","NavLink","onClick","href","Modal","isOpen","ModalHeader","ModalBody","Alert","color","Form","FormGroup","Label","for","Input","placeholder","className","Button","style","marginTop","block","Component","connect","dispatch","body","JSON","stringify","axios","post","then","res","data","catch","err","response","LoginModal","user","login","Logout","logout","AppNavbar","authLinks","NavItem","guestLinks","Navbar","dark","expand","Container","NavbarBrand","NavbarToggler","Collapse","navbar","Nav","setItemsLoading","ShoppingList","onDeleteClick","deleteItem","getItems","items","item","ListGroup","TransitionGroup","map","_id","CSSTransition","key","timeout","classNames","ListGroupItem","size","bind","get","delete","ItemModal","newItem","addItem","marginBottom","initialState","loading","staatus","localStorage","getItem","isLoading","combineReducers","action","filter","setItem","removeItem","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","window","__REDUX_DEVTOOLS_EXTENSION__","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.3ffae737.chunk.js","sourcesContent":["import { GET_ERRORS, CLEAR_ERRORS } from './types';\n\n// Return Errors\nexport const returnErrors = (msg, status, id = null) => {\n    return {\n        type: GET_ERRORS,\n        payload: { msg, status, id }\n    }\n}\n\n// Clear Errors\nexport const clearErrors = () => {\n    return {\n        type: CLEAR_ERRORS\n    };\n};","export const GET_ITEMS = 'GET_ITEMS';\nexport const ADD_ITEM = 'ADD_ITEM';\nexport const DELETE_ITEM = 'DELETE_ITEM';\nexport const ITEMS_LOADING = 'ITEMS_LOADING';\nexport const USER_LOADING = \"USER_LOADING\";\nexport const USER_LOADED = \"USER_LOADED\";\nexport const AUTH_ERROR = \"AUTH_ERROR\";\nexport const LOGIN_SUCCESS = \"LOGIN_SUCCESS\";\nexport const LOGIN_FAIL = \"LOGIN_FAIL\";\nexport const LOGOUT_SUCCESS = \"LOGOUT_SUCCESS\";\nexport const REGISTER_SUCCESS = \"REGISTER_SUCCESS\";\nexport const REGISTER_FAIL = \"REGISTER_FAIL\";\nexport const GET_ERRORS = 'GET_ERRORS';\nexport const CLEAR_ERRORS = 'CLEAR_ERRORS';","import axios from 'axios';\nimport { returnErrors } from \"./errorActions\";\n\nimport {\n    USER_LOADED,\n    USER_LOADING,\n    AUTH_ERROR,\n    LOGIN_SUCCESS,\n    LOGIN_FAIL,\n    LOGOUT_SUCCESS,\n    REGISTER_SUCCESS,\n    REGISTER_FAIL\n} from './types';\n\n// Check token & load user\nexport const loadUser = () => (dispatch, getState) => {\n    // User loading\n    dispatch({ type: USER_LOADING });\n\n    axios.get('/api/auth/user', tokenConfig(getState))\n        .then(res => dispatch({\n            type: USER_LOADED,\n            payload: res.data\n        }))\n        .catch(err => {\n            dispatch(returnErrors(err.response.data, err.response.status))\n            dispatch({\n                type: AUTH_ERROR\n            });\n        });\n}\n\n//Register User\nexport const register = ({ name, email, password }) => dispatch => {\n    // Headers\n    const config = {\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    }\n\n    // Request body\n    const body = JSON.stringify({ name, email, password });\n    axios.post('/api/users', body, config)\n        .then(res => dispatch({\n            type: REGISTER_SUCCESS,\n            payload: res.data\n        }))\n        .catch(err => {\n            dispatch(returnErrors(err.response.data, err.response.status, 'REGISTER_FAIL'));\n            dispatch({\n                type: REGISTER_FAIL\n            })\n        })\n}\n\n// Login User\nexport const login = ({ email, password }) => dispatch => {\n    // Headers\n    const config = {\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    }\n\n    // Request body\n    const body = JSON.stringify({ email, password });\n    axios.post('/api/auth', body, config)\n        .then(res => dispatch({\n            type: LOGIN_SUCCESS,\n            payload: res.data\n        }))\n        .catch(err => {\n            dispatch(returnErrors(err.response.data, err.response.status, 'LOGIN_FAIL'));\n            dispatch({\n                type: LOGIN_FAIL\n            })\n        })\n}\n\n// Logout User\nexport const logout = () => {\n    return {\n        type: LOGOUT_SUCCESS\n    }\n}\n\n// Setup config/headers and token\nexport const tokenConfig = getState => {\n    // Get token from localstorage\n    const token = getState().auth.token;\n\n    // Headers\n    const config = {\n        headers: {\n            \"Content-type\": \"application/json\"\n        }\n    }\n\n    // If token, add to headers\n    if (token) {\n        config.headers['x-auth-token'] = token;\n    }\n\n    return config\n}","import React, { Component } from 'react';\nimport {\n    Button,\n    Modal,\n    ModalHeader,\n    ModalBody,\n    Form,\n    FormGroup,\n    Label,\n    Input,\n    NavLink,\n    Alert\n} from 'reactstrap';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { register } from '../../actions/authActions';\nimport { clearErrors } from '../../actions/errorActions'\n\nclass RegisterModal extends Component {\n    state = {\n        model: false,\n        name: '',\n        email: '',\n        password: '',\n        msg: null\n    }\n\n    static propTypes = {\n        isAuthenticated: PropTypes.bool,\n        error: PropTypes.object.isRequired,\n        register: PropTypes.func.isRequired,\n        clearErrors: PropTypes.func.isRequired\n    }\n\n    componentDidUpdate(prevProps) {\n        const { error, isAuthenticated } = this.props;\n        if (error !== prevProps.error) {\n            // Check for register error\n            if (error.id === 'REGISTER_FAIL') {\n                this.setState({ msg: error.msg.msg });\n            }\n            else {\n                this.setState({ msg: null });\n            }\n        }\n        // If Authenticated, close model\n        if (this.state.model) {\n            if (isAuthenticated) {\n                this.toggle();\n            }\n        }\n    }\n\n    toggle = () => {\n        // Clear errors\n        this.props.clearErrors();\n\n        this.setState({\n            model: !this.state.model\n        })\n    }\n\n    onChange = (e) => {\n        this.setState({ [e.target.name]: e.target.value });\n    }\n\n    onSubmit = (e) => {\n        e.preventDefault();\n\n        const { name, email, password } = this.state;\n\n        // Create user object\n        const newUser = {\n            name,\n            email,\n            password\n        };\n\n        // Attempt to register\n        this.props.register(newUser);\n\n    }\n\n    render() {\n        return (\n            <div>\n                <NavLink onClick={this.toggle} href=\"#\">\n                    Register\n                </NavLink>\n\n                <Modal\n                    isOpen={this.state.model}\n                    toggle={this.toggle}\n                >\n                    <ModalHeader toggle={this.toggle}>\n                        Register\n                    </ModalHeader>\n                    <ModalBody>\n                        {this.state.msg ? (<Alert color=\"danger\">{this.state.msg}</Alert>) : null}\n                        <Form onSubmit={this.onSubmit}>\n                            <FormGroup>\n\n                                <Label for=\"name\">Name</Label>\n                                <Input\n                                    type=\"text\"\n                                    name=\"name\"\n                                    id=\"name\"\n                                    placeholder=\"Name\"\n                                    className='mb-3'\n                                    onChange={this.onChange}\n                                />\n\n                                <Label for=\"email\">Email</Label>\n                                <Input\n                                    type=\"email\"\n                                    name=\"email\"\n                                    id=\"email\"\n                                    placeholder=\"Email\"\n                                    className='mb-3'\n                                    onChange={this.onChange}\n                                />\n\n                                <Label for=\"password\">Password</Label>\n                                <Input\n                                    type=\"password\"\n                                    name=\"password\"\n                                    id=\"password\"\n                                    placeholder=\"Password\"\n                                    className='mb-3'\n                                    onChange={this.onChange}\n                                />\n\n                                <Button\n                                    color=\"dark\"\n                                    style={{ marginTop: '2rem' }}\n                                    block\n                                >Register</Button>\n                            </FormGroup>\n                        </Form>\n                    </ModalBody>\n                </Modal>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => ({\n    isAuthenticated: state.auth.isAuthenticated,\n    error: state.error\n});\n\nexport default connect(mapStateToProps, { register, clearErrors })(RegisterModal);","import React, { Component } from 'react';\nimport {\n    Button,\n    Modal,\n    ModalHeader,\n    ModalBody,\n    Form,\n    FormGroup,\n    Label,\n    Input,\n    NavLink,\n    Alert\n} from 'reactstrap';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { login } from '../../actions/authActions';\nimport { clearErrors } from '../../actions/errorActions'\n\nclass LoginModal extends Component {\n    state = {\n        model: false,\n        email: '',\n        password: '',\n        msg: null\n    }\n\n    static propTypes = {\n        isAuthenticated: PropTypes.bool,\n        error: PropTypes.object.isRequired,\n        login: PropTypes.func.isRequired,\n        clearErrors: PropTypes.func.isRequired\n    }\n\n    componentDidUpdate(prevProps) {\n        const { error, isAuthenticated } = this.props;\n        if (error !== prevProps.error) {\n            // Check for register error\n            if (error.id === 'LOGIN_FAIL') {\n                this.setState({ msg: error.msg.msg });\n            }\n            else {\n                this.setState({ msg: null });\n            }\n        }\n        // If Authenticated, close model\n        if (this.state.model) {\n            if (isAuthenticated) {\n                this.toggle();\n            }\n        }\n    }\n\n    toggle = () => {\n        // Clear errors\n        this.props.clearErrors();\n\n        this.setState({\n            model: !this.state.model\n        })\n    }\n\n    onChange = (e) => {\n        this.setState({ [e.target.name]: e.target.value });\n    }\n\n    onSubmit = (e) => {\n        e.preventDefault();\n\n        const { email, password } = this.state;\n        const user = {\n            email,\n            password\n        }\n\n        // Attempt to login\n        this.props.login(user);\n    }\n\n    render() {\n        return (\n            <div>\n                <NavLink onClick={this.toggle} href=\"#\">\n                    Login\n                </NavLink>\n\n                <Modal\n                    isOpen={this.state.model}\n                    toggle={this.toggle}\n                >\n                    <ModalHeader toggle={this.toggle}>\n                        Login\n                    </ModalHeader>\n                    <ModalBody>\n                        {this.state.msg ? (<Alert color=\"danger\">{this.state.msg}</Alert>) : null}\n                        <Form onSubmit={this.onSubmit}>\n                            <FormGroup>\n\n                                <Label for=\"email\">Email</Label>\n                                <Input\n                                    type=\"email\"\n                                    name=\"email\"\n                                    id=\"email\"\n                                    placeholder=\"Email\"\n                                    className='mb-3'\n                                    onChange={this.onChange}\n                                />\n\n                                <Label for=\"password\">Password</Label>\n                                <Input\n                                    type=\"password\"\n                                    name=\"password\"\n                                    id=\"password\"\n                                    placeholder=\"Password\"\n                                    className='mb-3'\n                                    onChange={this.onChange}\n                                />\n\n                                <Button\n                                    color=\"dark\"\n                                    style={{ marginTop: '2rem' }}\n                                    block\n                                >Login</Button>\n                            </FormGroup>\n                        </Form>\n                    </ModalBody>\n                </Modal>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => ({\n    isAuthenticated: state.auth.isAuthenticated,\n    error: state.error\n});\n\nexport default connect(mapStateToProps, { login, clearErrors })(LoginModal);","import React, { Component, Fragment } from 'react';\nimport { connect } from 'react-redux';\nimport { logout } from '../../actions/authActions';\nimport { NavLink } from 'reactstrap';\nimport PropTypes from 'prop-types';\n\nexport class Logout extends Component {\n\n    static propTypes = {\n        logout: PropTypes.func.isRequired\n    }\n\n    render() {\n        return (\n            <Fragment>\n                <NavLink onClick={this.props.logout} href=\"#\">\n                    Logout\n                </NavLink>\n            </Fragment>\n        )\n    }\n}\n\nexport default connect(\n    null,\n    { logout }\n)(Logout);","import React, { Component, Fragment } from 'react';\nimport {\n    Collapse,\n    Navbar,\n    NavbarToggler,\n    NavbarBrand,\n    Nav,\n    NavItem,\n    Container\n} from 'reactstrap';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport RegisterModal from './auth/RegisterModal';\nimport LoginModal from './auth/LoginModal';\nimport Logout from './auth/Logout';\n\nclass AppNavbar extends Component {\n    state = {\n        isOpen: false\n    }\n\n    static propTypes = {\n        auth: PropTypes.object.isRequired\n    }\n\n    toggle = () => {\n        this.setState({\n            isOpen: !this.state.isOpen\n        });\n    }\n\n    render() {\n        const { isAuthenticated, user } = this.props.auth;\n\n        const authLinks = (\n            <Fragment>\n                <NavItem>\n                    <span className=\"navbar-text mr-3\">\n                        <strong>{user ? `Welcome ${user.name}` : ''}</strong>\n                    </span>\n                </NavItem>\n                <NavItem><Logout /></NavItem>\n            </Fragment>\n        )\n\n        const guestLinks = (\n            <Fragment>\n                <NavItem><RegisterModal /></NavItem>\n                <NavItem><LoginModal /></NavItem>\n            </Fragment>\n        )\n        return (\n            <div>\n                <Navbar color=\"dark\" dark expand=\"sm\" className=\"mb-5\">\n                    <Container>\n                        <NavbarBrand href=\"/\">ShoppingList</NavbarBrand>\n                        <NavbarToggler onClick={this.toggle} />\n                        <Collapse isOpen={this.state.isOpen} navbar />\n                        <Nav className=\"ml-auto\" navbar>\n                            {isAuthenticated ? authLinks : guestLinks}\n                        </Nav>\n                    </Container>\n                </Navbar>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => ({\n    auth: state.auth\n})\n\nexport default connect(mapStateToProps, null)(AppNavbar);","import { GET_ITEMS, ADD_ITEM, DELETE_ITEM, ITEMS_LOADING } from './types'\nimport { tokenConfig } from './authActions'\nimport { returnErrors } from './errorActions'\nimport axios from 'axios'\n\nexport const getItems = () => dispatch => {\n    dispatch(setItemsLoading());\n    axios.get('/api/items').then(res =>\n        dispatch({\n            type: GET_ITEMS,\n            payload: res.data\n        }))\n        .catch(err => dispatch(returnErrors(err.response.data, err.response.status)));\n};\n\nexport const deleteItem = id => (dispatch, getState) => {\n    axios.delete(`/api/items/${id}`, tokenConfig(getState)).then(res =>\n        dispatch({\n            type: DELETE_ITEM,\n            payload: id\n        }))\n        .catch(err => dispatch(returnErrors(err.response.data, err.response.status)));\n};\n\nexport const addItem = item => (dispatch, getState) => {\n    axios.post('/api/items', item, tokenConfig(getState)).then(res => dispatch({\n        type: ADD_ITEM,\n        payload: res.data\n    }))\n        .catch(err => dispatch(returnErrors(err.response.data, err.response.status)));\n};\n\nexport const setItemsLoading = () => {\n    return {\n        type: ITEMS_LOADING,\n    };\n};","import React, { Component } from 'react';\nimport { Container, ListGroup, ListGroupItem, Button } from 'reactstrap';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\nimport { connect } from 'react-redux';\nimport { getItems, deleteItem } from '../actions/itemActions';\nimport PropTypes from 'prop-types';\n\nclass ShoppingList extends Component {\n\n    static propTypes = {\n        getItems: PropTypes.func.isRequired,\n        item: PropTypes.object.isRequired,\n        isAuthenticated: PropTypes.bool\n    }\n\n    componentDidMount() {\n        this.props.getItems();\n    }\n\n    onDeleteClick = id => {\n        this.props.deleteItem(id);\n    }\n\n    render() {\n        const { items } = this.props.item;\n        return (\n            <Container>\n                <ListGroup>\n                    <TransitionGroup className=\"shopping-list\">\n                        {items.map(({ _id, name }) => (\n                            <CSSTransition key={_id} timeout={500} classNames=\"fade\">\n                                <ListGroupItem>\n                                    {this.props.isAuthenticated ? <Button\n                                        className=\"remove-btn\"\n                                        color=\"danger\"\n                                        size=\"sm\"\n                                        onClick={this.onDeleteClick.bind(this, _id)}\n                                    >\n                                        &times;\n                                    </Button> : null}\n                                    {name}\n                                </ListGroupItem>\n                            </CSSTransition>\n                        ))}\n                    </TransitionGroup>\n                </ListGroup>\n            </Container>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => ({\n    item: state.item,\n    isAuthenticated: state.auth.isAuthenticated\n});\n\nexport default connect(\n    mapStateToProps,\n    { getItems, deleteItem }\n)(ShoppingList);","import React, { Component } from 'react';\nimport {\n    Button,\n    Modal,\n    ModalHeader,\n    ModalBody,\n    Form,\n    FormGroup,\n    Label,\n    Input\n} from 'reactstrap';\nimport { connect } from 'react-redux';\nimport { addItem } from '../actions/itemActions';\nimport PropTypes from 'prop-types';\n\nclass ItemModal extends Component {\n    state = {\n        model: false,\n        name: ''\n    }\n\n    static propTypes = {\n        isAuthenticated: PropTypes.bool\n    }\n\n    toggle = () => {\n        this.setState({\n            model: !this.state.model\n        })\n    }\n\n    onChange = (e) => {\n        this.setState({ [e.target.name]: e.target.value });\n    }\n\n    onSubmit = (e) => {\n        e.preventDefault();\n\n        const newItem = {\n            name: this.state.name\n        }\n\n        // Add item via addItem action\n        this.props.addItem(newItem);\n\n        // Close modal\n        this.toggle();\n    }\n\n    render() {\n        return (\n            <div>\n                {this.props.isAuthenticated ? <Button\n                    color=\"dark\"\n                    style={{ marginBottom: '2rem' }}\n                    onClick={this.toggle}\n                >Add Item</Button> : <h4 className=\"mb-3 ml-4\">Please log in to manage items</h4>}\n\n                <Modal\n                    isOpen={this.state.model}\n                    toggle={this.toggle}\n                >\n                    <ModalHeader toggle={this.toggle}>\n                        Add To Shopping List\n                    </ModalHeader>\n                    <ModalBody>\n                        <Form onSubmit={this.onSubmit}>\n                            <FormGroup>\n                                <Label for=\"item\">Item</Label>\n                                <Input\n                                    type=\"text\"\n                                    name=\"name\"\n                                    id=\"item\"\n                                    placeholder=\"Add shopping item\"\n                                    onChange={this.onChange}\n                                />\n                                <Button\n                                    color=\"dark\"\n                                    style={{ marginTop: '2rem' }}\n                                    block\n                                >Add Item</Button>\n                            </FormGroup>\n                        </Form>\n                    </ModalBody>\n                </Modal>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => ({\n    item: state.item,\n    isAuthenticated: state.auth.isAuthenticated\n});\n\nexport default connect(mapStateToProps, { addItem })(ItemModal);","import { GET_ITEMS, ADD_ITEM, DELETE_ITEM, ITEMS_LOADING } from '../actions/types'\n\nconst initialState = {\n    items: [],\n    loading: false\n}\n\nexport default function (state = initialState, action) {\n    switch (action.type) {\n        case GET_ITEMS:\n            return {\n                ...state,\n                items: action.payload,\n                loading: false\n            };\n        case DELETE_ITEM:\n            return {\n                ...state,\n                items: state.items.filter(item => item._id !== action.payload)\n            };\n        case ADD_ITEM:\n            return {\n                ...state,\n                items: [action.payload, ...state.items]\n            };\n        case ITEMS_LOADING:\n            return {\n                ...state,\n                loading: true\n            };\n        default:\n            return state;\n    }\n}","import { GET_ERRORS, CLEAR_ERRORS } from '../actions/types';\n\nconst initialState = {\n    msg: {},\n    staatus: null,\n    id: null\n}\n\nexport default function (state = initialState, action) {\n    switch (action.type) {\n        case GET_ERRORS:\n            return {\n                msg: action.payload.msg,\n                status: action.payload.status,\n                id: action.payload.id\n            };\n        case CLEAR_ERRORS:\n            return {\n                msg: {},\n                status: null,\n                id: null\n            };\n        default:\n            return state;\n    }\n}","import {\n    USER_LOADED,\n    USER_LOADING,\n    AUTH_ERROR,\n    LOGIN_SUCCESS,\n    LOGIN_FAIL,\n    LOGOUT_SUCCESS,\n    REGISTER_SUCCESS,\n    REGISTER_FAIL\n} from '../actions/types';\n\nconst initialState = {\n    token: localStorage.getItem('token'),\n    isAuthenticated: null,\n    isLoading: false,\n    user: null\n};\n\nexport default function (state = initialState, action) {\n    switch (action.type) {\n        case USER_LOADING:\n            return {\n                ...state,\n                isLoading: true\n            };\n        case USER_LOADED:\n            return {\n                ...state,\n                isAuthenticated: true,\n                isLoading: false,\n                user: action.payload\n            }\n        case LOGIN_SUCCESS:\n        case REGISTER_SUCCESS:\n            localStorage.setItem('token', action.payload.token);\n            return {\n                ...state,\n                ...action.payload,\n                isAuthenticated: true,\n                isLoading: false,\n            };\n        case LOGIN_FAIL:\n        case AUTH_ERROR:\n        case LOGOUT_SUCCESS:\n        case REGISTER_FAIL:\n            localStorage.removeItem('token');\n            return {\n                ...state,\n                token: null,\n                user: null,\n                isAuthenticated: false,\n                isLoading: false\n            };\n        default:\n            return state;\n    }\n}","import { combineReducers } from 'redux';\nimport itemReducer from './itemReducer';\nimport errorReducer from './errorReducer';\nimport authReducer from './authReducer';\n\nexport default combineReducers({\n    item: itemReducer,\n    error: errorReducer,\n    auth: authReducer\n});","import { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers';\n\nconst initialState = {};\n\nconst middleware = [thunk];\n\nconst store = createStore(\n    rootReducer,\n    initialState,\n    compose(\n        applyMiddleware(...middleware),\n        window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n    )\n );\n\nexport default store;","import React, { Component } from 'react';\nimport AppNavbar from './components/AppNavbar'\nimport ShoppingList from './components/ShoppingList'\nimport ItemModal from './components/itemModal'\nimport { Container } from 'reactstrap'\n\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport { loadUser } from './actions/authActions';\n\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './App.css';\n\nclass App extends Component {\n  componentDidMount() {\n    store.dispatch(loadUser());\n  }\n\n  render() {\n    return (\n      <Provider store={store}>\n        <div className=\"App\">\n          <AppNavbar />\n          <Container>\n            <ItemModal />\n            <ShoppingList />\n          </Container>\n        </div>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}